const express = require('express');
const bcrypt = require('bcryptjs');

const { setTokenCookie, requireAuth } = require('../../utils/auth');
const { User } = require('../../db/models');

const router = express.Router();


const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');
const { ValidationError } = require('sequelize');

const validateSignup = [
    check('firstName')
      .exists({ checkFalsy: true })
      .isLength({ min: 2 }),
      check('lastName')
      .exists({ checkFalsy: true })
      .isLength({ min: 2}),
    check('email')
      .exists({ checkFalsy: true })
      .isEmail()
      .withMessage('Please provide a valid email.'),
    check('username')
      .exists({ checkFalsy: true })
      .isLength({ min: 4 })
      .withMessage('Please provide a username with at least 4 characters.'),
    check('username')
      .not()
      .isEmail()
      .withMessage('Username cannot be an email.'),
    check('password')
      .exists({ checkFalsy: true })
      .isLength({ min: 6 })
      .withMessage('Password must be 6 characters or more.'),
    handleValidationErrors
  ];

// Sign up
router.post(
    '/',
    validateSignup,
    async (req, res) => {
      const { firstName,lastName ,email, password, username } = req.body;

      const checkingEmail = await User.findAll({
        where: {
          email: email
        }
      })
  
      if (checkingEmail.length > 0) return res.status(500).json({
        "message": "User already exists",
        "errors": {
          "email": "User with that email already exists"
        }
      });
  
      const checkingUsername = await User.findAll({
        where:{
          username:username
        }
      })
  
      if (checkingUsername.length > 0) return res.status(500).json({
        "message": "User already exists",
        "errors": {
          "username": "User with that username already exists"
        }
      });

      if(ValidationError(req.body))return res.status(500).json({
        "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
        "errors": {
          "email": "Invalid email",
          "username": "Username is required",
          "firstName": "First Name is required",
          "lastName": "Last Name is required"
        }
      })

      const hashedPassword = bcrypt.hashSync(password);

      const user = await User.create({ firstName,lastName,email, username, hashedPassword });
  
      const safeUser = {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        username: user.username,
      };
  
      await setTokenCookie(res, safeUser);
  
      return res.json({
        user: safeUser
      });
    }
  );
  
module.exports = router;